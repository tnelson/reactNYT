{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ControlledInput","props","value","onChange","ev","setValue","target","OldRound","className","guess","length","readOnly","NewRound","useState","value0","setValue0","value1","setValue1","value2","setValue2","onClick","isNaN","parseInt","setNotification","addGuess","App","guesses","setGuesses","notification","map","guessNumber","newGuesses","slice","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAUA,SAASA,EAAgBC,GACvB,OACE,uBAAOC,MAAOD,EAAMC,MAAOC,SAAU,SAACC,GAAD,OAAQH,EAAMI,SAASD,EAAGE,OAAOJ,UAI1E,SAASK,EAASN,GAChB,OACE,sBAAKO,UAAW,gBAfHC,EAe0BR,EAAMQ,MAd3B,IAAjBA,EAAMC,UACND,EAAM,IAAMA,EAAM,OAClBA,EAAM,IAAMA,EAAM,KAYnB,UACE,uBAAOP,MAAOD,EAAMQ,MAAM,GAAIE,UAAQ,IACtC,uBAAOT,MAAOD,EAAMQ,MAAM,GAAIE,UAAQ,IACtC,uBAAOT,MAAOD,EAAMQ,MAAM,GAAIE,UAAQ,OAlB5C,IAAiBF,EAsBjB,SAASG,EAASX,GAChB,MAA4BY,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,OACE,sBAAKX,UAAU,YAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,cAACR,EAAD,CAAiBE,MAAOY,EAAQT,SAAUU,IAC1C,cAACf,EAAD,CAAiBE,MAAOc,EAAQX,SAAUY,IAC1C,cAACjB,EAAD,CAAiBE,MAAOgB,EAAQb,SAAUc,OAE5C,8BACE,wBAAQC,QAAS,WACTC,MAAMC,SAASR,KAAaO,MAAMC,SAASN,KAAaK,MAAMC,SAASJ,IAOzEjB,EAAMsB,gBAAgB,6CANtBtB,EAAMuB,SAAS,CAACV,EAAOE,EAAOE,IAC9BH,EAAU,IACVE,EAAU,IACVE,EAAU,IACVlB,EAAMsB,gBAAgB,MAN5B,yBAwCOE,MArBf,WACE,MAA8BZ,mBAAS,IAAvC,mBAAOa,EAAP,KAAgBC,EAAhB,KACA,EAAwCd,mBAAS,IAAjD,mBAAOe,EAAP,KAAqBL,EAArB,KACA,OACE,sBAAKf,UAAU,MAAf,UACIkB,EAAQG,KAAK,SAACpB,EAAMqB,GAAP,OACb,cAACvB,EAAD,CACEE,MAAOA,EACPkB,WAAY,cACPG,MACT,cAAClB,EAAD,CACEW,gBAAiBA,EACjBC,SAAU,SAACf,GACT,IAAMsB,EAAaL,EAAQM,QAC3BD,EAAWE,KAAKxB,GAChBkB,EAAWI,MACdH,MC5DQM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0fec8a5b.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\n\nfunction pattern(guess) {\n  if(guess.length !== 3) return false;\n  if(guess[0] >= guess[1]) return false;\n  if(guess[1] >= guess[2]) return false;\n  return true;\n}\n\nfunction ControlledInput(props) {\n  return (\n    <input value={props.value} onChange={(ev) => props.setValue(ev.target.value)}></input>\n  );\n}\n\nfunction OldRound(props) {\n  return (\n    <div className={\"guess-round-\"+pattern(props.guess)}>     \n      <input value={props.guess[0]} readOnly/>\n      <input value={props.guess[1]} readOnly/>\n      <input value={props.guess[2]} readOnly/>\n    </div>\n  );  \n}\nfunction NewRound(props) {\n  const [value0, setValue0] = useState('');\n  const [value1, setValue1] = useState('');\n  const [value2, setValue2] = useState('');\n  return (\n    <div className=\"new-round\">\n      <div className=\"guess-round-current\">     \n        <ControlledInput value={value0} setValue={setValue0} />       \n        <ControlledInput value={value1} setValue={setValue1} />       \n        <ControlledInput value={value2} setValue={setValue2} /> \n      </div>\n      <div>\n        <button onClick={() => {  \n            if(!isNaN(parseInt(value0)) && !isNaN(parseInt(value1)) && !isNaN(parseInt(value2))) {\n              props.addGuess([value0,value1,value2])\n              setValue0('')\n              setValue1('')\n              setValue2('')\n              props.setNotification('')\n            } else {\n              props.setNotification('Please provide a full 3-number sequence.')\n            }\n          }}>\n          Guess!\n        </button>\n      </div>\n    </div>\n  );  \n}\n\n\nfunction App() {\n  const [guesses, setGuesses] = useState([]);\n  const [notification, setNotification] = useState('');\n  return (\n    <div className=\"App\">   \n      { guesses.map( (guess,guessNumber) => \n        <OldRound           \n          guess={guess}\n          setGuesses={() => undefined}\n          key={guessNumber} />)}\n      <NewRound         \n        setNotification={setNotification}\n        addGuess={(guess) => {          \n          const newGuesses = guesses.slice(); \n          newGuesses.push(guess)\n          setGuesses(newGuesses) }} />\n      {notification}   \n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}